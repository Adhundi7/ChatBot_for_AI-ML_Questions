Generally, most of us worry about writing good code which is efficient. So, I see people coming back with comments like if it makes the training slower why are we going with it. This is a slower training algorithm why are we wasting time. It's not wasting time, we are talking about an algorithm which is computationally intensive, don't worry about computational cost of a training algorithm.Most of the training is offline. When you write code, we only look at code which goes online, in the sense it goes into a real use. Here, there is a seperate code which is not used by the product. The training code is not the code that goes into the production. What is going is the learned model. The learned model needs to be efficient. But, the learned model creation process need not be fast. Don't mind doing that on cloud. If someone tells me i want a good solution but it should also run on my laptop, it's okay to spend on cloud credit. It will pay you more than struggling on the laptop. Computational resources required for training vs computational resources affordable at testing are different. Lets not mix these two. We typically see only the deployment code always.We put lot of effort into writing this code which we donot see.
